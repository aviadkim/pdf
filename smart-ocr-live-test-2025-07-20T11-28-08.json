{
  "timestamp": "2025-07-20T11:28:07.340Z",
  "renderUrl": "https://pdf-fzzi.onrender.com",
  "tests": [
    {
      "name": "Smart OCR Stats",
      "endpoint": "/api/smart-ocr-stats",
      "method": "GET",
      "startTime": "2025-07-20T11:28:07.344Z",
      "status": "passed",
      "responseTime": 309,
      "statusCode": 200,
      "response": {
        "success": true,
        "stats": {}
      },
      "error": null
    },
    {
      "name": "Smart OCR Patterns",
      "endpoint": "/api/smart-ocr-patterns",
      "method": "GET",
      "startTime": "2025-07-20T11:28:07.657Z",
      "status": "passed",
      "responseTime": 91,
      "statusCode": 200,
      "response": {
        "success": true,
        "patterns": {}
      },
      "error": null
    },
    {
      "name": "Smart OCR Test",
      "endpoint": "/api/smart-ocr-test",
      "method": "GET",
      "startTime": "2025-07-20T11:28:07.748Z",
      "status": "passed",
      "responseTime": 79,
      "statusCode": 200,
      "response": {
        "status": "healthy",
        "service": "Smart OCR Learning System",
        "version": "1.0.0",
        "mistralEnabled": true,
        "endpoints": {
          "process": "/api/smart-ocr-process",
          "stats": "/api/smart-ocr-stats",
          "patterns": "/api/smart-ocr-patterns",
          "learn": "/api/smart-ocr-learn",
          "annotation": "/smart-annotation"
        }
      },
      "error": null
    },
    {
      "name": "Smart Annotation Interface",
      "endpoint": "/smart-annotation",
      "method": "GET",
      "startTime": "2025-07-20T11:28:07.828Z",
      "status": "passed",
      "responseTime": 87,
      "statusCode": 200,
      "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Smart Financial PDF OCR - Visual Annotation Interface</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            color: #2d3748;\n        }\n\n        .container {\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n\n        .header {\n            background: white;\n            padding: 30px;\n            border-radius: 15px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n            margin-bottom: 30px;\n            text-align: center;\n        }\n\n        .header h1 {\n            color: #2d3748;\n            font-size: 2.5em;\n            margin-bottom: 10px;\n            font-weight: 700;\n        }\n\n        .subtitle {\n            color: #718096;\n            font-size: 1.2em;\n            margin-bottom: 20px;\n        }\n\n        .accuracy-badge {\n            display: inline-block;\n            background: linear-gradient(45deg, #48bb78, #38a169);\n            color: white;\n            padding: 8px 20px;\n            border-radius: 25px;\n            font-weight: 600;\n            font-size: 1.1em;\n            margin: 0 10px;\n        }\n\n        .main-interface {\n            display: grid;\n            grid-template-columns: 1fr 400px;\n            gap: 30px;\n            height: calc(100vh - 200px);\n        }\n\n        .pdf-viewer {\n            background: white;\n            border-radius: 15px;\n            padding: 20px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n            position: relative;\n            overflow: auto;\n        }\n\n        .pdf-canvas {\n            position: relative;\n            border: 2px solid #e2e8f0;\n            border-radius: 10px;\n            background: #f8fafc;\n            min-height: 800px;\n            background-image: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 100 100\\\"><defs><pattern id=\\\"grid\\\" width=\\\"10\\\" height=\\\"10\\\" patternUnits=\\\"userSpaceOnUse\\\"><path d=\\\"M 10 0 L 0 0 0 10\\\" fill=\\\"none\\\" stroke=\\\"%23e2e8f0\\\" stroke-width=\\\"0.5\\\"/></pattern></defs><rect width=\\\"100\\\" height=\\\"100\\\" fill=\\\"url(%23grid)\\\" /></svg>');\n            cursor: crosshair;\n            user-select: none;\n        }\n\n        .annotation-tools {\n            background: white;\n            border-radius: 15px;\n            padding: 20px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n            height: fit-content;\n        }\n\n        .tools-header {\n            text-align: center;\n            margin-bottom: 25px;\n        }\n\n        .tools-header h2 {\n            color: #2d3748;\n            font-size: 1.5em;\n            margin-bottom: 10px;\n        }\n\n        .tool-category {\n            margin-bottom: 25px;\n            padding: 15px;\n            background: #f8fafc;\n            border-radius: 10px;\n            border-left: 4px solid #667eea;\n        }\n\n        .tool-category h3 {\n            color: #4a5568;\n            font-size: 1.1em;\n            margin-bottom: 15px;\n            display: flex;\n            align-items: center;\n        }\n\n        .tool-category h3::before {\n            content: '🎨';\n            margin-right: 8px;\n        }\n\n        .annotation-buttons {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n            margin-bottom: 20px;\n        }\n\n        .tool-btn {\n            padding: 12px 16px;\n            border: none;\n            border-radius: 8px;\n            font-size: 0.9em;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .tool-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n\n        .tool-btn.active {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n        }\n\n        .tool-btn.table-header {\n            background: linear-gradient(45deg, #3b82f6, #2563eb);\n            color: white;\n        }\n\n        .tool-btn.data-row {\n            background: linear-gradient(45deg, #10b981, #059669);\n            color: white;\n        }\n\n        .tool-btn.connection {\n            background: linear-gradient(45deg, #ef4444, #dc2626);\n            color: white;\n        }\n\n        .tool-btn.highlight {\n            background: linear-gradient(45deg, #f59e0b, #d97706);\n            color: white;\n        }\n\n        .tool-btn.correction {\n            background: linear-gradient(45deg, #8b5cf6, #7c3aed);\n            color: white;\n        }\n\n        .tool-btn.relationship {\n            background: linear-gradient(45deg, #ec4899, #db2777);\n            color: white;\n        }\n\n        .progress-section {\n            background: #f8fafc;\n            padding: 20px;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .progress-bar {\n            width: 100%;\n            height: 8px;\n            background: #e2e8f0;\n            border-radius: 4px;\n            overflow: hidden;\n            margin-bottom: 10px;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(90deg, #48bb78, #38a169);\n            transition: width 0.3s ease;\n        }\n\n        .confidence-indicator {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-top: 10px;\n        }\n\n        .confidence-score {\n            font-weight: 600;\n            color: #2d3748;\n        }\n\n        .patterns-learned {\n            background: #e6fffa;\n            border: 1px solid #81e6d9;\n            border-radius: 8px;\n            padding: 15px;\n            margin-bottom: 20px;\n        }\n\n        .patterns-learned h4 {\n            color: #234e52;\n            margin-bottom: 10px;\n        }\n\n        .pattern-item {\n            background: white;\n            padding: 8px 12px;\n            border-radius: 6px;\n            margin-bottom: 8px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n\n        .pattern-confidence {\n            background: #48bb78;\n            color: white;\n            padding: 2px 8px;\n            border-radius: 12px;\n            font-size: 0.8em;\n            font-weight: 600;\n        }\n\n        .action-buttons {\n            display: flex;\n            gap: 10px;\n            margin-top: 20px;\n        }\n\n        .action-btn {\n            flex: 1;\n            padding: 12px 16px;\n            border: none;\n            border-radius: 8px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n\n        .btn-primary {\n            background: linear-gradient(45deg, #667eea, #764ba2);\n            color: white;\n        }\n\n        .btn-secondary {\n            background: linear-gradient(45deg, #f093fb, #f5576c);\n            color: white;\n        }\n\n        .action-btn:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n\n        .annotation-overlay {\n            position: absolute;\n            pointer-events: none;\n            border: 2px solid;\n            border-radius: 4px;\n            background: rgba(255,255,255,0.1);\n            backdrop-filter: blur(1px);\n        }\n\n        .annotation-overlay.table-header {\n            border-color: #3b82f6;\n            background: rgba(59, 130, 246, 0.1);\n        }\n\n        .annotation-overlay.data-row {\n            border-color: #10b981;\n            background: rgba(16, 185, 129, 0.1);\n        }\n\n        .annotation-overlay.connection {\n            border-color: #ef4444;\n            background: rgba(239, 68, 68, 0.1);\n        }\n\n        .annotation-overlay.highlight {\n            border-color: #f59e0b;\n            background: rgba(245, 158, 11, 0.1);\n        }\n\n        .annotation-overlay.correction {\n            border-color: #8b5cf6;\n            background: rgba(139, 92, 246, 0.1);\n        }\n\n        .annotation-overlay.relationship {\n            border-color: #ec4899;\n            background: rgba(236, 72, 153, 0.1);\n        }\n\n        .connection-line {\n            position: absolute;\n            pointer-events: none;\n            stroke: #ef4444;\n            stroke-width: 3;\n            stroke-dasharray: 5,5;\n            fill: none;\n        }\n\n        .upload-area {\n            border: 2px dashed #cbd5e0;\n            border-radius: 10px;\n            padding: 40px;\n            text-align: center;\n            background: #f8fafc;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            margin-bottom: 20px;\n        }\n\n        .upload-area:hover {\n            border-color: #667eea;\n            background: #edf2f7;\n        }\n\n        .upload-area.drag-over {\n            border-color: #48bb78;\n            background: #f0fff4;\n        }\n\n        .upload-icon {\n            font-size: 3em;\n            margin-bottom: 15px;\n        }\n\n        .stats-grid {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n\n        .stat-item {\n            background: white;\n            padding: 15px;\n            border-radius: 8px;\n            text-align: center;\n            border-left: 4px solid #667eea;\n        }\n\n        .stat-value {\n            font-size: 1.8em;\n            font-weight: 700;\n            color: #2d3748;\n        }\n\n        .stat-label {\n            font-size: 0.9em;\n            color: #718096;\n            margin-top: 5px;\n        }\n\n        .learning-indicator {\n            background: linear-gradient(45deg, #f093fb, #f5576c);\n            color: white;\n            padding: 10px;\n            border-radius: 8px;\n            text-align: center;\n            font-weight: 600;\n            margin-bottom: 20px;\n            animation: pulse 2s infinite;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.02); }\n            100% { transform: scale(1); }\n        }\n\n        .tooltip {\n            position: absolute;\n            background: rgba(0,0,0,0.8);\n            color: white;\n            padding: 8px 12px;\n            border-radius: 6px;\n            font-size: 0.9em;\n            pointer-events: none;\n            z-index: 1000;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n\n        .tooltip.show {\n            opacity: 1;\n        }\n\n        .shortcuts {\n            background: #f8fafc;\n            padding: 15px;\n            border-radius: 8px;\n            margin-top: 20px;\n            border-left: 4px solid #667eea;\n        }\n\n        .shortcuts h4 {\n            color: #2d3748;\n            margin-bottom: 10px;\n            font-size: 1em;\n        }\n\n        .shortcut-item {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 5px;\n            font-size: 0.9em;\n        }\n\n        .shortcut-key {\n            background: #e2e8f0;\n            padding: 2px 6px;\n            border-radius: 4px;\n            font-weight: 600;\n        }\n\n        /* Responsive design */\n        @media (max-width: 1200px) {\n            .main-interface {\n                grid-template-columns: 1fr;\n                gap: 20px;\n            }\n            \n            .annotation-tools {\n                max-width: 600px;\n                margin: 0 auto;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .container {\n                padding: 10px;\n            }\n            \n            .header {\n                padding: 20px;\n            }\n            \n            .header h1 {\n                font-size: 2em;\n            }\n            \n            .annotation-buttons {\n                grid-template-columns: 1fr;\n            }\n            \n            .stats-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🧠 Smart Financial PDF OCR</h1>\n            <p class=\"subtitle\">Visual Annotation Learning System</p>\n            <div>\n                <span class=\"accuracy-badge\">Current Accuracy: <span id=\"currentAccuracy\">80%</span></span>\n                <span class=\"accuracy-badge\">Target: 99.9%</span>\n            </div>\n        </div>\n\n        <div class=\"main-interface\">\n            <div class=\"pdf-viewer\">\n                <div class=\"upload-area\" id=\"uploadArea\">\n                    <div class=\"upload-icon\">📄</div>\n                    <h3>Upload Financial PDF</h3>\n                    <p>Drag & drop or click to upload</p>\n                    <input type=\"file\" id=\"fileInput\" accept=\".pdf\" style=\"display: none;\">\n                </div>\n                <div class=\"pdf-canvas\" id=\"pdfCanvas\" style=\"display: none;\">\n                    <!-- PDF pages will be rendered here -->\n                </div>\n                <svg id=\"connectionLines\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;\">\n                    <!-- Connection lines will be drawn here -->\n                </svg>\n            </div>\n\n            <div class=\"annotation-tools\">\n                <div class=\"tools-header\">\n                    <h2>Annotation Tools</h2>\n                    <p>Train the AI with visual annotations</p>\n                </div>\n\n                <div class=\"learning-indicator\" id=\"learningIndicator\" style=\"display: none;\">\n                    🧠 Learning from your annotations...\n                </div>\n\n                <div class=\"progress-section\">\n                    <h4>Learning Progress</h4>\n                    <div class=\"progress-bar\">\n                        <div class=\"progress-fill\" id=\"progressFill\" style=\"width: 0%\"></div>\n                    </div>\n                    <div class=\"confidence-indicator\">\n                        <span>Confidence Score</span>\n                        <span class=\"confidence-score\" id=\"confidenceScore\">80%</span>\n                    </div>\n                </div>\n\n                <div class=\"tool-category\">\n                    <h3>Visual Annotation Tools</h3>\n                    <div class=\"annotation-buttons\">\n                        <button class=\"tool-btn table-header\" data-tool=\"table-header\">\n                            📋 Headers\n                        </button>\n                        <button class=\"tool-btn data-row\" data-tool=\"data-row\">\n                            📊 Data Rows\n                        </button>\n                        <button class=\"tool-btn connection\" data-tool=\"connection\">\n                            🔗 Connect\n                        </button>\n                        <button class=\"tool-btn highlight\" data-tool=\"highlight\">\n                            ✨ Highlight\n                        </button>\n                        <button class=\"tool-btn correction\" data-tool=\"correction\">\n                            ✏️ Correct\n                        </button>\n                        <button class=\"tool-btn relationship\" data-tool=\"relationship\">\n                            🔄 Relate\n                        </button>\n                    </div>\n                </div>\n\n                <div class=\"patterns-learned\" id=\"patternsLearned\">\n                    <h4>🎯 Patterns Learned</h4>\n                    <div class=\"pattern-item\">\n                        <span>Table Headers</span>\n                        <span class=\"pattern-confidence\">85%</span>\n                    </div>\n                    <div class=\"pattern-item\">\n                        <span>ISIN Format</span>\n                        <span class=\"pattern-confidence\">92%</span>\n                    </div>\n                    <div class=\"pattern-item\">\n                        <span>Value Columns</span>\n                        <span class=\"pattern-confidence\">88%</span>\n                    </div>\n                </div>\n\n                <div class=\"stats-grid\">\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\" id=\"annotationCount\">0</div>\n                        <div class=\"stat-label\">Annotations</div>\n                    </div>\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\" id=\"patternsCount\">3</div>\n                        <div class=\"stat-label\">Patterns</div>\n                    </div>\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\" id=\"documentsCount\">0</div>\n                        <div class=\"stat-label\">Documents</div>\n                    </div>\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\" id=\"accuracyGain\">+0%</div>\n                        <div class=\"stat-label\">Accuracy Gain</div>\n                    </div>\n                </div>\n\n                <div class=\"action-buttons\">\n                    <button class=\"action-btn btn-primary\" id=\"learnBtn\">\n                        🧠 Learn Patterns\n                    </button>\n                    <button class=\"action-btn btn-secondary\" id=\"processBtn\">\n                        🚀 Process Document\n                    </button>\n                </div>\n\n                <div class=\"shortcuts\">\n                    <h4>⌨️ Keyboard Shortcuts</h4>\n                    <div class=\"shortcut-item\">\n                        <span>Table Headers</span>\n                        <span class=\"shortcut-key\">H</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <span>Data Rows</span>\n                        <span class=\"shortcut-key\">D</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <span>Connect Fields</span>\n                        <span class=\"shortcut-key\">C</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <span>Highlight Important</span>\n                        <span class=\"shortcut-key\">L</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <span>Correct Text</span>\n                        <span class=\"shortcut-key\">E</span>\n                    </div>\n                    <div class=\"shortcut-item\">\n                        <span>Relate Fields</span>\n                        <span class=\"shortcut-key\">R</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"tooltip\" id=\"tooltip\"></div>\n\n    <script>\n        class SmartAnnotationInterface {\n            constructor() {\n                this.currentTool = null;\n                this.annotations = [];\n                this.isDrawing = false;\n                this.startPoint = null;\n                this.currentAnnotation = null;\n                this.connectionMode = false;\n                this.selectedElements = [];\n                this.currentDocument = null;\n                this.learningProgress = 0;\n                this.confidenceScore = 80;\n                \n                this.init();\n            }\n\n            init() {\n                this.setupEventListeners();\n                this.setupKeyboardShortcuts();\n                this.updateUI();\n            }\n\n            setupEventListeners() {\n                // File upload\n                const uploadArea = document.getElementById('uploadArea');\n                const fileInput = document.getElementById('fileInput');\n                \n                uploadArea.addEventListener('click', () => fileInput.click());\n                uploadArea.addEventListener('dragover', (e) => {\n                    e.preventDefault();\n                    uploadArea.classList.add('drag-over');\n                });\n                uploadArea.addEventListener('dragleave', () => {\n                    uploadArea.classList.remove('drag-over');\n                });\n                uploadArea.addEventListener('drop', (e) => {\n                    e.preventDefault();\n                    uploadArea.classList.remove('drag-over');\n                    const files = e.dataTransfer.files;\n                    if (files.length > 0) {\n                        this.handleFileUpload(files[0]);\n                    }\n                });\n                \n                fileInput.addEventListener('change', (e) => {\n                    if (e.target.files.length > 0) {\n                        this.handleFileUpload(e.target.files[0]);\n                    }\n                });\n\n                // Tool buttons\n                document.querySelectorAll('.tool-btn').forEach(btn => {\n                    btn.addEventListener('click', (e) => {\n                        this.selectTool(e.target.dataset.tool);\n                    });\n                });\n\n                // Action buttons\n                document.getElementById('learnBtn').addEventListener('click', () => {\n                    this.learnFromAnnotations();\n                });\n                \n                document.getElementById('processBtn').addEventListener('click', () => {\n                    this.processDocument();\n                });\n\n                // Canvas events\n                const canvas = document.getElementById('pdfCanvas');\n                canvas.addEventListener('mousedown', (e) => this.startAnnotation(e));\n                canvas.addEventListener('mousemove', (e) => this.updateAnnotation(e));\n                canvas.addEventListener('mouseup', (e) => this.endAnnotation(e));\n                canvas.addEventListener('click', (e) => this.handleCanvasClick(e));\n            }\n\n            setupKeyboardShortcuts() {\n                document.addEventListener('keydown', (e) => {\n                    if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;\n                    \n                    switch(e.key.toLowerCase()) {\n                        case 'h':\n                            this.selectTool('table-header');\n                            break;\n                        case 'd':\n                            this.selectTool('data-row');\n                            break;\n                        case 'c':\n                            this.selectTool('connection');\n                            break;\n                        case 'l':\n                            this.selectTool('highlight');\n                            break;\n                        case 'e':\n                            this.selectTool('correction');\n                            break;\n                        case 'r':\n                            this.selectTool('relationship');\n                            break;\n                        case 'escape':\n                            this.cancelCurrentAction();\n                            break;\n                    }\n                });\n            }\n\n            selectTool(tool) {\n                // Remove active class from all tools\n                document.querySelectorAll('.tool-btn').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                \n                // Add active class to selected tool\n                document.querySelector(`[data-tool=\"${tool}\"]`).classList.add('active');\n                \n                this.currentTool = tool;\n                this.connectionMode = tool === 'connection';\n                \n                // Update cursor\n                const canvas = document.getElementById('pdfCanvas');\n                canvas.style.cursor = this.connectionMode ? 'crosshair' : 'crosshair';\n                \n                this.showTooltip(`Selected: ${tool.replace('-', ' ').toUpperCase()}`);\n            }\n\n            async handleFileUpload(file) {\n                if (!file.type.includes('pdf')) {\n                    alert('Please upload a PDF file');\n                    return;\n                }\n\n                this.showLoadingIndicator();\n                \n                try {\n                    const formData = new FormData();\n                    formData.append('pdf', file);\n                    \n                    const response = await fetch('/api/smart-ocr-process', {\n                        method: 'POST',\n                        body: formData\n                    });\n                    \n                    const result = await response.json();\n                    \n                    if (result.success) {\n                        this.currentDocument = result;\n                        this.displayDocument(result);\n                        this.updateStats(result);\n                        this.hideUploadArea();\n                    } else {\n                        alert('Error processing PDF: ' + result.error);\n                    }\n                } catch (error) {\n                    console.error('Upload error:', error);\n                    alert('Error uploading file');\n                } finally {\n                    this.hideLoadingIndicator();\n                }\n            }\n\n            displayDocument(documentData) {\n                const canvas = document.getElementById('pdfCanvas');\n                const uploadArea = document.getElementById('uploadArea');\n                \n                uploadArea.style.display = 'none';\n                canvas.style.display = 'block';\n                \n                // Clear previous annotations\n                this.clearAnnotations();\n                \n                // Display PDF pages\n                documentData.pages.forEach((page, index) => {\n                    const pageElement = document.createElement('div');\n                    pageElement.className = 'pdf-page';\n                    pageElement.style.cssText = `\n                        position: relative;\n                        margin-bottom: 20px;\n                        border: 1px solid #e2e8f0;\n                        border-radius: 8px;\n                        overflow: hidden;\n                    `;\n                    \n                    const img = document.createElement('img');\n                    img.src = page.base64;\n                    img.style.cssText = `\n                        width: 100%;\n                        height: auto;\n                        display: block;\n                    `;\n                    img.dataset.page = index;\n                    \n                    pageElement.appendChild(img);\n                    canvas.appendChild(pageElement);\n                });\n                \n                // Display suggested annotations if available\n                if (documentData.suggestedAnnotations) {\n                    this.displaySuggestedAnnotations(documentData.suggestedAnnotations);\n                }\n            }\n\n            displaySuggestedAnnotations(suggestions) {\n                const suggestionContainer = document.createElement('div');\n                suggestionContainer.className = 'suggestions';\n                suggestionContainer.style.cssText = `\n                    background: #fff3cd;\n                    border: 1px solid #ffeaa7;\n                    border-radius: 8px;\n                    padding: 15px;\n                    margin-bottom: 20px;\n                `;\n                \n                const title = document.createElement('h4');\n                title.textContent = '💡 AI Suggestions';\n                title.style.cssText = 'margin-bottom: 10px; color: #856404;';\n                \n                suggestionContainer.appendChild(title);\n                \n                suggestions.forEach(suggestion => {\n                    const suggestionItem = document.createElement('div');\n                    suggestionItem.style.cssText = `\n                        background: white;\n                        padding: 10px;\n                        border-radius: 6px;\n                        margin-bottom: 8px;\n                        border-left: 4px solid #ffc107;\n                    `;\n                    \n                    suggestionItem.innerHTML = `\n                        <strong>${suggestion.field}</strong>: ${suggestion.suggestedAction}\n                        <br><small>${suggestion.reason}</small>\n                    `;\n                    \n                    suggestionContainer.appendChild(suggestionItem);\n                });\n                \n                document.getElementById('pdfCanvas').prepend(suggestionContainer);\n            }\n\n            startAnnotation(e) {\n                if (!this.currentTool) return;\n                \n                this.isDrawing = true;\n                this.startPoint = this.getMousePosition(e);\n                \n                if (this.currentTool === 'connection') {\n                    this.handleConnectionStart(e);\n                } else {\n                    this.createAnnotationElement(this.startPoint);\n                }\n            }\n\n            updateAnnotation(e) {\n                if (!this.isDrawing || !this.currentAnnotation) return;\n                \n                const currentPoint = this.getMousePosition(e);\n                this.updateAnnotationElement(currentPoint);\n            }\n\n            endAnnotation(e) {\n                if (!this.isDrawing) return;\n                \n                this.isDrawing = false;\n                \n                if (this.currentAnnotation) {\n                    this.finalizeAnnotation(e);\n                }\n            }\n\n            createAnnotationElement(startPoint) {\n                const annotation = document.createElement('div');\n                annotation.className = `annotation-overlay ${this.currentTool}`;\n                annotation.style.cssText = `\n                    position: absolute;\n                    left: ${startPoint.x}px;\n                    top: ${startPoint.y}px;\n                    width: 0px;\n                    height: 0px;\n                    z-index: 100;\n                `;\n                \n                document.getElementById('pdfCanvas').appendChild(annotation);\n                this.currentAnnotation = annotation;\n            }\n\n            updateAnnotationElement(currentPoint) {\n                if (!this.currentAnnotation) return;\n                \n                const width = Math.abs(currentPoint.x - this.startPoint.x);\n                const height = Math.abs(currentPoint.y - this.startPoint.y);\n                const left = Math.min(this.startPoint.x, currentPoint.x);\n                const top = Math.min(this.startPoint.y, currentPoint.y);\n                \n                this.currentAnnotation.style.left = left + 'px';\n                this.currentAnnotation.style.top = top + 'px';\n                this.currentAnnotation.style.width = width + 'px';\n                this.currentAnnotation.style.height = height + 'px';\n            }\n\n            finalizeAnnotation(e) {\n                if (!this.currentAnnotation) return;\n                \n                const rect = this.currentAnnotation.getBoundingClientRect();\n                \n                if (rect.width < 10 || rect.height < 10) {\n                    this.currentAnnotation.remove();\n                    this.currentAnnotation = null;\n                    return;\n                }\n                \n                const annotationData = {\n                    id: this.generateAnnotationId(),\n                    type: this.currentTool,\n                    coordinates: {\n                        x: parseInt(this.currentAnnotation.style.left),\n                        y: parseInt(this.currentAnnotation.style.top),\n                        width: parseInt(this.currentAnnotation.style.width),\n                        height: parseInt(this.currentAnnotation.style.height)\n                    },\n                    timestamp: new Date().toISOString(),\n                    page: this.getCurrentPage(e)\n                };\n                \n                // Add tool-specific data\n                if (this.currentTool === 'correction') {\n                    annotationData.originalText = this.promptForOriginalText();\n                    annotationData.correctedText = this.promptForCorrectedText();\n                }\n                \n                this.annotations.push(annotationData);\n                this.currentAnnotation.dataset.annotationId = annotationData.id;\n                this.currentAnnotation.title = this.generateTooltipText(annotationData);\n                \n                this.currentAnnotation = null;\n                this.updateAnnotationCount();\n                \n                // Show feedback\n                this.showTooltip('Annotation created!');\n            }\n\n            handleConnectionStart(e) {\n                const target = e.target.closest('.annotation-overlay');\n                if (target) {\n                    this.selectedElements.push(target);\n                    target.style.boxShadow = '0 0 10px rgba(239, 68, 68, 0.5)';\n                    \n                    if (this.selectedElements.length === 2) {\n                        this.createConnection();\n                    }\n                }\n            }\n\n            createConnection() {\n                const [source, target] = this.selectedElements;\n                \n                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                line.setAttribute('class', 'connection-line');\n                \n                const sourceRect = source.getBoundingClientRect();\n                const targetRect = target.getBoundingClientRect();\n                const canvasRect = document.getElementById('pdfCanvas').getBoundingClientRect();\n                \n                line.setAttribute('x1', sourceRect.left + sourceRect.width/2 - canvasRect.left);\n                line.setAttribute('y1', sourceRect.top + sourceRect.height/2 - canvasRect.top);\n                line.setAttribute('x2', targetRect.left + targetRect.width/2 - canvasRect.left);\n                line.setAttribute('y2', targetRect.top + targetRect.height/2 - canvasRect.top);\n                \n                document.getElementById('connectionLines').appendChild(line);\n                \n                // Create connection annotation\n                const connectionData = {\n                    id: this.generateAnnotationId(),\n                    type: 'connection',\n                    source: source.dataset.annotationId,\n                    target: target.dataset.annotationId,\n                    timestamp: new Date().toISOString()\n                };\n                \n                this.annotations.push(connectionData);\n                \n                // Reset selection\n                this.selectedElements.forEach(el => {\n                    el.style.boxShadow = '';\n                });\n                this.selectedElements = [];\n                \n                this.updateAnnotationCount();\n                this.showTooltip('Connection created!');\n            }\n\n            async learnFromAnnotations() {\n                if (this.annotations.length === 0) {\n                    alert('Please create some annotations first');\n                    return;\n                }\n                \n                this.showLearningIndicator();\n                \n                try {\n                    const response = await fetch('/api/smart-ocr-learn', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            documentId: this.currentDocument.documentId,\n                            annotations: this.annotations\n                        })\n                    });\n                    \n                    const result = await response.json();\n                    \n                    if (result.success) {\n                        this.updateLearningProgress(result);\n                        this.showTooltip('Learning completed!');\n                    } else {\n                        alert('Learning failed: ' + result.error);\n                    }\n                } catch (error) {\n                    console.error('Learning error:', error);\n                    alert('Error during learning process');\n                } finally {\n                    this.hideLearningIndicator();\n                }\n            }\n\n            async processDocument() {\n                if (!this.currentDocument) {\n                    alert('Please upload a document first');\n                    return;\n                }\n                \n                this.showLoadingIndicator();\n                \n                try {\n                    const response = await fetch('/api/smart-ocr-enhanced', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            documentId: this.currentDocument.documentId\n                        })\n                    });\n                    \n                    const result = await response.json();\n                    \n                    if (result.success) {\n                        this.displayProcessingResults(result);\n                        this.updateAccuracy(result.enhancedAccuracy);\n                    } else {\n                        alert('Processing failed: ' + result.error);\n                    }\n                } catch (error) {\n                    console.error('Processing error:', error);\n                    alert('Error during document processing');\n                } finally {\n                    this.hideLoadingIndicator();\n                }\n            }\n\n            displayProcessingResults(result) {\n                const resultsContainer = document.createElement('div');\n                resultsContainer.className = 'processing-results';\n                resultsContainer.style.cssText = `\n                    background: #f0fff4;\n                    border: 1px solid #9ae6b4;\n                    border-radius: 8px;\n                    padding: 20px;\n                    margin-bottom: 20px;\n                `;\n                \n                resultsContainer.innerHTML = `\n                    <h3 style=\"color: #276749; margin-bottom: 15px;\">🎉 Processing Complete!</h3>\n                    <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-bottom: 15px;\">\n                        <div style=\"text-align: center;\">\n                            <div style=\"font-size: 1.5em; font-weight: bold; color: #276749;\">${result.enhancedAccuracy}%</div>\n                            <div style=\"font-size: 0.9em; color: #68d391;\">Accuracy</div>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <div style=\"font-size: 1.5em; font-weight: bold; color: #276749;\">${result.patternsApplied || 0}</div>\n                            <div style=\"font-size: 0.9em; color: #68d391;\">Patterns Applied</div>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <div style=\"font-size: 1.5em; font-weight: bold; color: #276749;\">${result.extractedFields || 0}</div>\n                            <div style=\"font-size: 0.9em; color: #68d391;\">Fields Extracted</div>\n                        </div>\n                    </div>\n                    <div style=\"background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #48bb78;\">\n                        <strong>Extracted Data:</strong>\n                        <pre style=\"margin-top: 10px; white-space: pre-wrap;\">${JSON.stringify(result.extractedData, null, 2)}</pre>\n                    </div>\n                `;\n                \n                document.getElementById('pdfCanvas').prepend(resultsContainer);\n            }\n\n            updateLearningProgress(result) {\n                this.learningProgress = Math.min(100, this.learningProgress + (result.patternsLearned * 5));\n                this.confidenceScore = Math.min(99, this.confidenceScore + result.accuracyImprovement);\n                \n                document.getElementById('progressFill').style.width = this.learningProgress + '%';\n                document.getElementById('confidenceScore').textContent = this.confidenceScore + '%';\n                \n                // Update patterns learned\n                this.updatePatternsDisplay(result);\n            }\n\n            updatePatternsDisplay(result) {\n                const container = document.getElementById('patternsLearned');\n                const existingPatterns = container.querySelectorAll('.pattern-item');\n                \n                // Add new patterns\n                if (result.newPatterns) {\n                    result.newPatterns.forEach(pattern => {\n                        const patternItem = document.createElement('div');\n                        patternItem.className = 'pattern-item';\n                        patternItem.innerHTML = `\n                            <span>${pattern.name}</span>\n                            <span class=\"pattern-confidence\">${pattern.confidence}%</span>\n                        `;\n                        container.appendChild(patternItem);\n                    });\n                }\n                \n                // Update patterns count\n                document.getElementById('patternsCount').textContent = container.querySelectorAll('.pattern-item').length;\n            }\n\n            updateAccuracy(newAccuracy) {\n                const currentAccuracy = parseInt(document.getElementById('currentAccuracy').textContent);\n                const gain = newAccuracy - currentAccuracy;\n                \n                document.getElementById('currentAccuracy').textContent = newAccuracy + '%';\n                document.getElementById('accuracyGain').textContent = '+' + gain + '%';\n                \n                // Animate the progress bar\n                const progressBar = document.getElementById('progressFill');\n                progressBar.style.width = (newAccuracy / 100 * 100) + '%';\n            }\n\n            updateStats(documentData) {\n                document.getElementById('documentsCount').textContent = parseInt(document.getElementById('documentsCount').textContent) + 1;\n            }\n\n            updateAnnotationCount() {\n                document.getElementById('annotationCount').textContent = this.annotations.length;\n            }\n\n            // Utility methods\n            getMousePosition(e) {\n                const rect = document.getElementById('pdfCanvas').getBoundingClientRect();\n                return {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            }\n\n            getCurrentPage(e) {\n                const img = e.target.closest('img');\n                return img ? parseInt(img.dataset.page) : 0;\n            }\n\n            generateAnnotationId() {\n                return 'annotation_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n            }\n\n            generateTooltipText(annotation) {\n                return `${annotation.type.replace('-', ' ').toUpperCase()} - ${annotation.coordinates.width}x${annotation.coordinates.height}`;\n            }\n\n            promptForOriginalText() {\n                return prompt('Enter the original text that needs correction:') || '';\n            }\n\n            promptForCorrectedText() {\n                return prompt('Enter the corrected text:') || '';\n            }\n\n            showTooltip(text) {\n                const tooltip = document.getElementById('tooltip');\n                tooltip.textContent = text;\n                tooltip.classList.add('show');\n                setTimeout(() => tooltip.classList.remove('show'), 2000);\n            }\n\n            showLearningIndicator() {\n                document.getElementById('learningIndicator').style.display = 'block';\n            }\n\n            hideLearningIndicator() {\n                document.getElementById('learningIndicator').style.display = 'none';\n            }\n\n            showLoadingIndicator() {\n                // Implementation for loading indicator\n            }\n\n            hideLoadingIndicator() {\n                // Implementation for loading indicator\n            }\n\n            hideUploadArea() {\n                document.getElementById('uploadArea').style.display = 'none';\n            }\n\n            clearAnnotations() {\n                this.annotations = [];\n                document.querySelectorAll('.annotation-overlay').forEach(el => el.remove());\n                document.getElementById('connectionLines').innerHTML = '';\n                document.querySelectorAll('.processing-results').forEach(el => el.remove());\n                document.querySelectorAll('.suggestions').forEach(el => el.remove());\n            }\n\n            cancelCurrentAction() {\n                this.isDrawing = false;\n                if (this.currentAnnotation) {\n                    this.currentAnnotation.remove();\n                    this.currentAnnotation = null;\n                }\n                this.selectedElements.forEach(el => el.style.boxShadow = '');\n                this.selectedElements = [];\n            }\n\n            updateUI() {\n                // Update the UI based on current state\n                this.updateAnnotationCount();\n            }\n        }\n\n        // Initialize the application\n        document.addEventListener('DOMContentLoaded', () => {\n            new SmartAnnotationInterface();\n        });\n    </script>\n</body>\n</html>",
      "error": null
    },
    {
      "name": "Smart OCR Process PDF",
      "endpoint": "/api/smart-ocr-process",
      "method": "POST",
      "startTime": "2025-07-20T11:28:07.921Z",
      "status": "passed",
      "responseTime": 557,
      "statusCode": 200,
      "response": {
        "success": true,
        "results": {
          "success": false,
          "error": "patterns.isin_patterns is not iterable",
          "method": "smart-ocr-no-gm"
        }
      },
      "error": null
    },
    {
      "name": "Smart OCR Learn",
      "endpoint": "/api/smart-ocr-learn",
      "method": "POST",
      "startTime": "2025-07-20T11:28:08.481Z",
      "status": "failed",
      "responseTime": 91,
      "statusCode": 500,
      "response": {
        "success": false,
        "error": "corrections.map is not a function"
      },
      "error": null
    },
    {
      "name": "API Info",
      "endpoint": "/api/info",
      "method": "GET",
      "startTime": "2025-07-20T11:28:08.573Z",
      "status": "failed",
      "responseTime": 87,
      "statusCode": 404,
      "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot GET /api/info</pre>\n</body>\n</html>\n",
      "error": null
    },
    {
      "name": "API Extraction Methods",
      "endpoint": "/api/extraction-methods",
      "method": "GET",
      "startTime": "2025-07-20T11:28:08.660Z",
      "status": "failed",
      "responseTime": 86,
      "statusCode": 404,
      "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot GET /api/extraction-methods</pre>\n</body>\n</html>\n",
      "error": null
    },
    {
      "name": "Homepage",
      "endpoint": "/",
      "method": "GET",
      "startTime": "2025-07-20T11:28:08.747Z",
      "status": "passed",
      "responseTime": 83,
      "statusCode": 200,
      "response": "\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Smart OCR Learning System</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        h1 { color: #333; text-align: center; }\n        .form-group { margin: 20px 0; }\n        input[type=\"file\"] { margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; width: 100%; }\n        button { background: #007bff; color: white; padding: 12px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }\n        button:hover { background: #0056b3; }\n        .success { color: green; }\n        .error { color: red; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🧠 Smart OCR Learning System</h1>\n        <p>🎯 Achieve 100% accuracy through Mistral OCR + Human Annotation</p>\n        \n        <h2>🔧 PDF Processing</h2>\n        <form action=\"/api/smart-ocr-process\" method=\"post\" enctype=\"multipart/form-data\">\n            <input type=\"file\" name=\"pdf\" accept=\".pdf\" required>\n            <button type=\"submit\">Process PDF with Smart OCR</button>\n        </form>\n        \n        <h2>📊 System Status</h2>\n        <ul>\n            <li>Initial Accuracy: 80-90% (Mistral OCR)</li>\n            <li>Target Accuracy: 99.9%</li>\n            <li>Learning Rate: Continuous improvement</li>\n        </ul>\n        \n        <h2>🎨 Visual Annotation</h2>\n        <a href=\"/smart-annotation\" target=\"_blank\">\n            <button type=\"button\">Open Annotation Interface</button>\n        </a>\n    </div>\n</body>\n</html>\n    ",
      "error": null
    }
  ],
  "summary": {
    "total": 9,
    "passed": 6,
    "failed": 3,
    "warnings": 1
  }
}