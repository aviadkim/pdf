/**
 * Test 99% Accuracy Implementation
 * Tests the new 99% accuracy endpoint and enhancements
 */

const https = require('https');
const fs = require('fs').promises;

class NinetyNinePercentAccuracyTester {
    constructor() {
        this.localUrl = 'http://localhost:10002';
        this.renderUrl = 'https://pdf-fzzi.onrender.com';
        
        // Expected accuracy for Messos portfolio
        this.expectedResults = {
            portfolioTotal: 19464431,
            targetAccuracy: 99.0,
            minimumSecurities: 35,
            knownSecurities: [
                { isin: 'CH0012005267', name: 'UBS Group AG', minValue: 800000 },
                { isin: 'CH0038863350', name: 'Nestl√© SA', minValue: 2000000 },
                { isin: 'US0378331005', name: 'Apple Inc.', minValue: 1400000 },
                { isin: 'US5949181045', name: 'Microsoft Corporation', minValue: 1800000 }
            ]
        };
    }
    
    async testNinetyNinePercentAccuracy() {
        console.log('üéØ TESTING 99% ACCURACY IMPLEMENTATION');
        console.log('='.repeat(60));
        console.log(`üéØ Target Accuracy: ${this.expectedResults.targetAccuracy}%`);
        console.log(`üìä Portfolio Total: CHF ${this.expectedResults.portfolioTotal.toLocaleString()}`);
        console.log('='.repeat(60));
        
        try {
            // Test 1: Local server test
            console.log('\\nüè† Testing local server...');\n            await this.testLocalServer();\n            \n            // Test 2: Render deployment test\n            console.log('\\nüåç Testing render deployment...');\n            await this.testRenderDeployment();\n            \n            // Test 3: Accuracy validation\n            console.log('\\nüìä Running accuracy validation...');\n            await this.validateAccuracy();\n            \n        } catch (error) {\n            console.error('‚ùå Test failed:', error.message);\n        }\n    }\n    \n    async testLocalServer() {\n        try {\n            const testPdf = this.createTestPdf();\n            const result = await this.testEndpoint(this.localUrl, '/api/99-percent-extract', testPdf);\n            \n            if (result.success) {\n                console.log(`‚úÖ Local server: ${result.accuracy}% accuracy`);\n                console.log(`   Securities: ${result.securities.length}`);\n                console.log(`   Total value: $${result.totalValue.toLocaleString()}`);\n                \n                if (result.accuracy >= this.expectedResults.targetAccuracy) {\n                    console.log('üéâ LOCAL SERVER ACHIEVED 99% ACCURACY!');\n                } else {\n                    console.log(`‚ö†Ô∏è Local accuracy: ${result.accuracy}% (target: ${this.expectedResults.targetAccuracy}%)`);\n                }\n            } else {\n                console.log('‚ùå Local server test failed:', result.error);\n            }\n        } catch (error) {\n            console.log('‚ö†Ô∏è Local server not available:', error.message);\n        }\n    }\n    \n    async testRenderDeployment() {\n        try {\n            const testPdf = this.createTestPdf();\n            const result = await this.testEndpoint(this.renderUrl, '/api/99-percent-extract', testPdf);\n            \n            if (result.success) {\n                console.log(`‚úÖ Render deployment: ${result.accuracy}% accuracy`);\n                console.log(`   Securities: ${result.securities.length}`);\n                console.log(`   Total value: $${result.totalValue.toLocaleString()}`);\n                console.log(`   Processing time: ${result.processingTime}ms`);\n                \n                if (result.accuracy >= this.expectedResults.targetAccuracy) {\n                    console.log('üöÄ RENDER DEPLOYMENT ACHIEVED 99% ACCURACY!');\n                } else {\n                    console.log(`‚ö†Ô∏è Render accuracy: ${result.accuracy}% (target: ${this.expectedResults.targetAccuracy}%)`);\n                }\n            } else {\n                console.log('‚ùå Render deployment test failed:', result.error);\n                \n                // Fallback: Test existing endpoints\n                console.log('üîÑ Testing fallback endpoints...');\n                await this.testFallbackEndpoints();\n            }\n        } catch (error) {\n            console.log('‚ùå Render deployment error:', error.message);\n        }\n    }\n    \n    async testFallbackEndpoints() {\n        const endpoints = [\n            '/api/bulletproof-processor',\n            '/api/hybrid-extract',\n            '/api/pdf-extract'\n        ];\n        \n        const testPdf = this.createTestPdf();\n        \n        for (const endpoint of endpoints) {\n            try {\n                const result = await this.testEndpoint(this.renderUrl, endpoint, testPdf);\n                if (result.success) {\n                    console.log(`‚úÖ ${endpoint}: ${result.accuracy || 'unknown'}% accuracy`);\n                } else {\n                    console.log(`‚ùå ${endpoint}: ${result.error || 'failed'}`);\n                }\n            } catch (error) {\n                console.log(`‚ùå ${endpoint}: ${error.message}`);\n            }\n        }\n    }\n    \n    async validateAccuracy() {\n        console.log('\\nüìä ACCURACY VALIDATION SUMMARY');\n        console.log('-'.repeat(40));\n        \n        // Run multiple test iterations\n        const iterations = 10;\n        const results = [];\n        \n        for (let i = 1; i <= iterations; i++) {\n            try {\n                const testPdf = this.createTestPdf();\n                const result = await this.testEndpoint(this.renderUrl, '/api/99-percent-extract', testPdf);\n                \n                if (result.success) {\n                    results.push({\n                        iteration: i,\n                        accuracy: result.accuracy,\n                        securities: result.securities.length,\n                        totalValue: result.totalValue,\n                        processingTime: result.processingTime\n                    });\n                }\n                \n                // Add small delay\n                await new Promise(resolve => setTimeout(resolve, 200));\n                \n            } catch (error) {\n                console.log(`   Test ${i}: Error - ${error.message}`);\n            }\n        }\n        \n        if (results.length > 0) {\n            const avgAccuracy = results.reduce((sum, r) => sum + r.accuracy, 0) / results.length;\n            const avgProcessingTime = results.reduce((sum, r) => sum + r.processingTime, 0) / results.length;\n            const above99 = results.filter(r => r.accuracy >= 99).length;\n            \n            console.log(`\\nüìà VALIDATION RESULTS (${results.length} tests):`);\n            console.log(`   Average accuracy: ${avgAccuracy.toFixed(2)}%`);\n            console.log(`   Tests ‚â•99% accuracy: ${above99}/${results.length} (${(above99/results.length*100).toFixed(1)}%)`);\n            console.log(`   Average processing time: ${avgProcessingTime.toFixed(0)}ms`);\n            \n            if (avgAccuracy >= 99) {\n                console.log('\\nüèÜ SUCCESS: 99% ACCURACY TARGET ACHIEVED!');\n                console.log(`‚ú® System consistently delivers ${avgAccuracy.toFixed(2)}% accuracy`);\n            } else if (avgAccuracy >= 95) {\n                console.log('\\nüìà GOOD: High accuracy achieved, approaching 99% target');\n                console.log(`üîß Current: ${avgAccuracy.toFixed(2)}% (gap: ${(99-avgAccuracy).toFixed(2)}%)`);\n            } else {\n                console.log('\\n‚ö†Ô∏è NEEDS IMPROVEMENT: Below target accuracy');\n                console.log(`üõ†Ô∏è Current: ${avgAccuracy.toFixed(2)}% - requires optimization`);\n            }\n        } else {\n            console.log('‚ùå No successful validation tests completed');\n        }\n    }\n    \n    createTestPdf() {\n        const content = `\nMESSOS PORTFOLIO STATEMENT\n==========================\n\nSecurities Holdings - Portfolio Analysis\n\nISIN: CH0012005267    UBS Group AG                                    850,000\nISIN: CH0038863350    Nestl√© SA                                     2,100,000\nISIN: US0378331005    Apple Inc.                                    1,450,000\nISIN: US5949181045    Microsoft Corporation                         1,890,000\nISIN: DE0007236101    Siemens AG                                      890,000\nISIN: NL0000235190    Airbus SE                                       780,000\nISIN: CH0244767585    ABB Ltd                                         920,000\nISIN: FR0000120578    Sanofi                                          540,000\nISIN: GB0002374006    Diageo plc                                      675,000\nISIN: CH0126881561    Zurich Insurance Group AG                    1,100,000\nISIN: CH0012221716    ABB Ltd Preferred                              760,000\nISIN: CH0038389992    BB Biotech AG                                   620,000\nISIN: DE0008469008    Allianz SE                                      980,000\nISIN: CH0023405456    Swisscom AG                                     850,000\nISIN: US00206R1023    AT&T Inc.                                       560,000\nISIN: CH0038389354    Lonza Group AG                                  740,000\nISIN: NL0011794037    ASML Holding NV                               1,320,000\nISIN: XS2746319610    Government Bond Series 2024                    140,000\nISIN: XS2407295554    Corporate Bond 2026                            320,000\nISIN: XS2252299883    Infrastructure Bond                             480,000\nISIN: XS1234567890    Municipal Bond 2025                            395,000\nISIN: XS8765432109    Green Energy Bond                               410,000\nISIN: XS5432167890    Development Finance Bond                        350,000\nISIN: CH1234567890    Credit Suisse Holdings                       1,200,000\nISIN: XS9999999999    Additional Security                             250,000\nISIN: CH1908490000    Swiss Bond                                      250,000\nISIN: XS2993414619    Corporate Bond                                  180,000\n\nPortfolio Total: 19'464'431 CHF\n\nAnalysis Date: July 2025\n`.trim();\n        \n        // Create minimal PDF structure\n        const pdfBuffer = Buffer.from(`%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n/Contents 4 0 R\n>>\nendobj\n\n4 0 obj\n<<\n/Length ${content.length}\n>>\nstream\nBT\n/F1 10 Tf\n40 750 Td\n${content.split('\\n').map(line => `(${line}) Tj 0 -15 Td`).join('\\n')}\nET\nendstream\nendobj\n\nxref\n0 5\n0000000000 65535 f \n0000000010 00000 n \n0000000060 00000 n \n0000000120 00000 n \n0000000220 00000 n \ntrailer\n<<\n/Size 5\n/Root 1 0 R\n>>\nstartxref\n${1000 + content.length}\n%%EOF`);\n        \n        return pdfBuffer;\n    }\n    \n    async testEndpoint(baseUrl, endpoint, pdfBuffer) {\n        return new Promise((resolve, reject) => {\n            const boundary = '----WebKitFormBoundary' + Math.random().toString(36);\n            \n            // Create form data\n            let formData = '';\n            formData += `--${boundary}\\r\\n`;\n            formData += `Content-Disposition: form-data; name=\"pdf\"; filename=\"test.pdf\"\\r\\n`;\n            formData += `Content-Type: application/pdf\\r\\n`;\n            formData += '\\r\\n';\n            \n            const header = Buffer.from(formData, 'utf8');\n            const footer = Buffer.from(`\\r\\n--${boundary}--\\r\\n`, 'utf8');\n            const body = Buffer.concat([header, pdfBuffer, footer]);\n            \n            const isHttps = baseUrl.startsWith('https');\n            const url = new URL(baseUrl + endpoint);\n            \n            const options = {\n                hostname: url.hostname,\n                port: isHttps ? 443 : url.port || 80,\n                path: url.pathname,\n                method: 'POST',\n                headers: {\n                    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n                    'Content-Length': body.length,\n                    'User-Agent': '99PercentAccuracyTester/1.0'\n                }\n            };\n            \n            const module = isHttps ? require('https') : require('http');\n            const req = module.request(options, (res) => {\n                let responseBody = '';\n                \n                res.on('data', (chunk) => {\n                    responseBody += chunk;\n                });\n                \n                res.on('end', () => {\n                    try {\n                        const result = JSON.parse(responseBody);\n                        resolve(result);\n                    } catch (error) {\n                        resolve({\n                            success: false,\n                            error: 'Invalid JSON response',\n                            rawResponse: responseBody.substring(0, 200)\n                        });\n                    }\n                });\n            });\n            \n            req.on('error', (error) => {\n                reject(error);\n            });\n            \n            req.setTimeout(30000, () => {\n                req.destroy();\n                reject(new Error('Request timeout'));\n            });\n            \n            req.write(body);\n            req.end();\n        });\n    }\n}\n\n// Run tests if called directly\nif (require.main === module) {\n    const tester = new NinetyNinePercentAccuracyTester();\n    tester.testNinetyNinePercentAccuracy().catch(error => {\n        console.error('‚ùå 99% accuracy test failed:', error.message);\n        process.exit(1);\n    });\n}\n\nmodule.exports = { NinetyNinePercentAccuracyTester };